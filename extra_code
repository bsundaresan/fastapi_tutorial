from fastapi import Body, FastAPI, Response, status, HTTPException, Depends
from pydantic import BaseModel
from typing import Optional

import psycopg2
from psycopg2.extras import RealDictCursor
import time

from sqlalchemy.orm import Session

from .database import *
from . import models

app = FastAPI()

#This creates the table
models.Base.metadata.create_all(bind=engine)

class Post(BaseModel):
    """
    Inherits from BaseModel of Pydantic
    """
    title: str
    content: str
    published: bool = True

while True:
    try:
        """
        Establish Postgres connection using Psycopg2. We
        need to pass in RealDictCursor in order to get column
        names with the data that we are retrieving
        """
        conn = psycopg2.connect(host='localhost', database='fastapi', 
                                user='postgres', password='postgres',
                                cursor_factory=RealDictCursor)

        cursor = conn.cursor()

        print('Database connection was successful')
        break

    except Exception as e:
        print("Connection to database failed!")
        print("Error was: ", e)
        time.sleep(3)

@app.get("/")
def home():
    
    return {
        "message": "Welcome to my API!"
        }

@app.get("/posts")
def get_posts(db: Session = Depends(get_db)):
    
    # cursor.execute("""
    #         SELECT * FROM posts;
    # """)
    # posts = cursor.fetchall()
    
    posts = db.query(models.Post).all()
    
    return {
        "data": posts
        }

@app.post("/posts", status_code=status.HTTP_201_CREATED)
def create_posts(post: Post, db: Session = Depends(get_db)):
    """
    Each post should have a title and content in sting format.
    We pass Pydamtic's BaseModel to a variable called post.
    FastAPI will validate the POST data using the Post class.
    Since post is a pydantic class instance to refer to variables use the 
    dot notation (post.title etc.). It can be converted to dict in-place using
    post.dict().

    We dont use f-strings to sed SQL queries since they are susceptible to 
    SQL injection attacks. Using the placeholder method allows psycopg2 to 
    assert the inputs.   
    """
    
    # We have to use RETURNING so that the execute command returns
    # the new post
    # cursor.execute("""
    #         INSERT INTO posts (title, content, published)\
    #         VALUES (%s, %s, %s) RETURNING *
    # """, (post.title, post.content, post.published))

    # new_post = cursor.fetchone()

    # conn.commit()

    new_post = models.Post(**post.dict())

    db.add(new_post)
    db.commit()
    db.refresh(new_post)

    return {
        "data": new_post
    }

@app.get("/posts/{id}")
def get_post(id: int, response: Response, db: Session=Depends(get_db)):
    
    # Convert variables to strings for execute command.
    # Also psycopg2 accepts tuples so follow a single value with a comma
    # cursor.execute("""
    #         SELECT * FROM posts WHERE id = %s
    # """, (str(id),))

    # post = cursor.fetchone()

    post = db.query(models.Post).filter(models.Post.id == id).first()

    if not post:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,
                            detail=f"Post with id: {id} not found!")
    return {
        "post_detail": post
    }


@app.delete("/posts/{id}")
def delete_post(id: int, status_code=status.HTTP_204_NO_CONTENT, db: Session=Depends(get_db)):
    """
    Find the index of the item to delete from the 
    my_posts list using list.pop() method. 
    """
    
    # cursor.execute("""
    #         DELETE FROM posts WHERE id = %s RETURNING *
    # """, (str(id), ))
    
    # deleted_post = cursor.fetchone()
    
    # conn.commit()

    post_query = db.query(models.Post).filter(models.Post.id == id)

    if post_query.first() == None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,
                            detail=f"Post with id: {id} not found!")

    post_query.delete(synchronize_session=False)

    db.commit()
    
    return Response(status_code=status.HTTP_204_NO_CONTENT)


@app.put("/posts/{id}")
def update_post(id: int, updated_post: Post, status_code=status.HTTP_201_CREATED, db: Session=Depends(get_db)):
    
    # cursor.execute("""
    #         UPDATE posts SET title=%s, content=%s, published=%s 
    #         WHERE id = %s RETURNING *\
    # """, (post.title, post.content, post.published, str(id)))
    
    # updated_post = cursor.fetchone()
    # conn.commit()
    
    post_query = db.query(models.Post).filter(models.Post.id == id)
    post = post_query.first()
    
    if post == None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,
                            detail=f"Post with id: {id} not found!")

    post_query.update(updated_post.dict(), synchronize_session=False)

    db.commit()

    return {"data": post_query.first()}    

